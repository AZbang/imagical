{"version":3,"sources":["stores/index.ts","components/Layout/View.tsx","components/User/User.tsx","components/Feed/Feed.tsx","App.tsx","stores/Account.ts","stores/Feed.ts","views/Preview.tsx","views/Main.tsx","components/Feed/Grid.tsx","components/Feed/Item.tsx","serviceWorker.ts","index.tsx"],"names":["feed","Feed","account","Account","styled","div","_templateObject","_ref","loading","onFeedEnd","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","Fragment","_Grid__WEBPACK_IMPORTED_MODULE_1__","onScroll","_ref2","el","currentTarget","scrollHeight","scrollTop","clientHeight","x","map","item","i","_Item__WEBPACK_IMPORTED_MODULE_2__","key","defaultProps","App","mobx_react__WEBPACK_IMPORTED_MODULE_1__","stores","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","exact","path","component","Preview","Main","access","connect","send","app_id","scope","data","this","access_token","console","log","method","params","Object","_home_azbang_magical_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","v","response","items","observable","action","offsets","Map","groups","group","id","offset","count","photos","shuffle","sort","Math","random","concat","setLoading","floor","length","get","api","owner_id","album_id","rev","set","addPhotos","parsePhotos","photo","size","sizes","find","type","url","width","height","_this","_this$getPhotoSize","getPhotoSize","cover","text","ButtonLink","_c","Link","Header","_c2","h1","_templateObject2","Layout","_c3","_templateObject3","_s","useEffect","init","react__WEBPACK_IMPORTED_MODULE_1___default","to","inject","observer","fetch","_components__WEBPACK_IMPORTED_MODULE_2__","bind","Grid","Image","img","Wrap","Item","src","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","root","document","getElementById","ReactDOM","render","_App__WEBPACK_IMPORTED_MODULE_4__"],"mappings":"+QAQO,IAAMA,EAAO,IAAIC,IACXC,EAAU,IAAIC,+mBCPdC,IAAOC,IAAVC,2XCAGF,IAAOC,IAAVC,oTCSV,MAAML,EAAwB,SAAAM,GAAkC,IAA/BP,EAA+BO,EAA/BP,KAAMQ,EAAyBD,EAAzBC,QAASC,EAAgBF,EAAhBE,UAO9C,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,SARO,SAAAC,GAAwD,IAAtCC,EAAsCD,EAArDE,cACdD,EAAGE,aAAeF,EAAGG,UAA8B,EAAlBH,EAAGI,eACrCb,GAAWC,GAAaA,KAMCa,EAAG,GAC1BtB,EAAKuB,IAAI,SAACC,EAAMC,GAAP,OACRf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,IAAKF,EAAGD,KAAMA,WAXxBvB,EAkBNA,EAAK2B,aAAe,CAClB5B,KAAM,IAGOC,8WCzBf,MAAM4B,EAAgB,kBACpBnB,EAAAC,EAAAC,cAACkB,EAAA,EAAaC,EACZrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,MACjC3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWE,WAJ/BT,EASSA,+YCVT1B,sDACGoC,OAAiB,uPAUCC,IAAQC,KAAK,uBAAwB,CAAEC,OAAQ,QAASC,MAAO,qBAA9EC,SACRC,KAAKN,OAASK,EAAKE,aACnBC,QAAQC,IAAIH,4KAGGI,EAAgBC,2FACRV,IAAQC,KAAK,wBAAyB,CAC3DQ,SACAC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFD,EADC,CAEJG,EAAG,OACHP,aAAcD,KAAKN,kCALfK,2BAQDA,EAAKU,SAASC,uJAtBtBC,6EACoB,yCAEpBA,8EACuB,qCAEvBC,yEAoBYtD,0XC/BTF,sDACJyD,QAAU,IAAIC,IAAIC,EAAOrC,IAAI,SAAAsC,GAAK,MAAI,CAACA,EAAMC,GAAI,8EAQjDC,OAAS,OACTC,MAAQ,0DAEUX,GAChBR,KAAKrC,QAAU6C,oCAGAY,GACf,IAAMC,EAAUD,EAAOE,KAAK,kBAAMC,KAAKC,SAAW,KAClDxB,KAAKD,KAAOC,KAAKD,KAAK0B,OAAOJ,4JAK7BrB,KAAK0B,YAAW,GAERT,EAAOF,EAAOQ,KAAKI,MAAMJ,KAAKC,SAAWT,EAAOa,SAAhDX,GACFC,EAASlB,KAAKa,QAAQgB,IAAIZ,IAAO,WACpB5D,UAAQyE,IAAI,aAAc,CAC3CC,UAAWd,EACXe,SAAU,OACVb,MAAOnB,KAAKmB,MACZD,OAAQA,EACRe,IAAK,WALDlC,SAQNC,KAAKa,QAAQqB,IAAIjB,EAAIC,EAASlB,KAAKmB,OACnCnB,KAAKmC,UAAUnC,KAAKoC,YAAYrC,IAChCC,KAAK0B,YAAW,0IAGEW,EAAiBC,GACnC,OACED,EAAME,MAAMC,KAAK,SAAA9E,GAAA,OAAAA,EAAG+E,OAAoBH,KAAS,CAC/CI,IAAK,KACLC,MAAO,KACPC,OAAQ,0CAKKnC,GAAiC,IAAAoC,EAAA7C,KAClD,OAAOS,EAAS/B,IAAI,SAAA2D,GAAS,IAAAS,EACID,EAAKE,aAAaV,EAAO,KAAhDK,EADmBI,EACnBJ,IAAKC,EADcG,EACdH,MAAOC,EADOE,EACPF,OACPI,EAAUH,EAAKE,aAAaV,EAAO,KAAxCK,IACR,MAAO,CACLO,KAAMZ,EAAMY,KACZZ,MAAOK,EACPM,QACAL,QACAC,uDAxDLjC,6EACiB,2CAEjBA,8EACkB,sCAclBC,0EA4CYxD,uiCChEf,YAAM8F,EAAUC,EAAG5F,YAAO6F,IAAP7F,CAAHE,KAoBV4F,EAAMC,EAAG/F,IAAOgG,GAAVC,KAKNC,EAAMC,EAAGnG,IAAOC,IAAVmG,KASNnE,EAA6B,SAAA9B,GAAiBkG,IAAA,IAAdvG,EAAcK,EAAdL,QAKpC,OAJAwG,oBAAU,WACRxG,EAAQyG,QACP,IAGDC,EAAAjG,EAAAC,cAAC0F,EAAD,KACEM,EAAAjG,EAAAC,cAACsF,EAAD,+BACAU,EAAAjG,EAAAC,cAACmF,EAAD,CAAYc,GAAG,SAAf,eACAD,EAAAjG,EAAAC,cAACmF,EAAD,CAAYc,GAAG,SAAf,oBATAxE,qBAcSyE,gBAAO,UAAPA,CAAkBC,YAAS1E,6aCjD1C,MAAMC,EAA0B,SAAA/B,GAAckG,IAAA,IAAXzG,EAAWO,EAAXP,KAKjC,OAJA0G,oBAAU,WACR1G,EAAKgH,SACJ,IAEItG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAMxG,UAAWT,EAAKgH,MAAME,KAAKlH,GAAOQ,QAASR,EAAKQ,QAASR,KAAMA,EAAK4C,UAL7EN,qBAQSwE,gBAAO,OAAPA,CAAeC,YAASzE,+xBCPvC,IAAM6E,EAAO/G,IAAOC,IAAVC,IAIiB,SAAAC,GAAA,IAAGe,EAAHf,EAAGe,EAAH,gBAAAgD,OAAqBhD,EAArB,YAE3B6F,EAAKvF,aAAe,CAClBN,EAAG,GAGU6F,umBCZf,UAAMC,EAAKpB,EAAG5F,IAAOiH,IAAV/G,KAQLgH,EAAInB,EAAG/F,IAAOC,IAAVgG,KAUJkB,EAAwB,SAAAhH,GAAc,IAAXiB,EAAWjB,EAAXiB,KAC/B,OACEoF,EAAAjG,EAAAC,cAAC0G,EAAD,KACEV,EAAAjG,EAAAC,cAACwG,EAAD,CAAOI,IAAKhG,EAAK0D,OAAS,SAH1BqC,EAQSA,qXClBKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA2E5B,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaL,4YCvFnB,IAAMM,EAAOC,SAASC,eAAe,QACrCC,IAASC,OAAO9H,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,MAASL,GACzBJ,MACAxF,IAAQC,KAAK,eAAgB","file":"static/js/main.a5ed5af1.chunk.js","sourcesContent":["import Account from './Account';\nimport Feed from './Feed';\n\nexport interface StoresI {\n  feed: Feed;\n  account: Account;\n}\n\nexport const feed = new Feed();\nexport const account = new Account();\n","import styled from 'styled-components';\n\nconst View = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  position: relative;\n  background: #09091d;\n`;\nexport default View;\n","import styled from 'styled-components';\n\nconst User = styled.div`\n  height: 300px;\n`;\nexport default User;\n","import React, { SyntheticEvent } from 'react';\nimport Grid from './Grid';\nimport Item from './Item';\nimport { ImagicI } from '../../typings';\n\ninterface Props {\n  feed: ImagicI[];\n  loading: boolean;\n  onFeedEnd?: () => void;\n}\n\nconst Feed: React.FC<Props> = ({ feed, loading, onFeedEnd }) => {\n  const scrolled = ({ currentTarget: el }: SyntheticEvent<HTMLElement>) => {\n    if (el.scrollHeight - el.scrollTop < el.clientHeight * 2) {\n      !loading && onFeedEnd && onFeedEnd();\n    }\n  };\n\n  return (\n    <>\n      <Grid onScroll={scrolled} x={3}>\n        {feed.map((item, i) => (\n          <Item key={i} item={item} />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nFeed.defaultProps = {\n  feed: [],\n};\n\nexport default Feed;\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport * as stores from './stores';\nimport Preview from './views/Preview';\nimport Main from './views/Main';\n\nconst App: React.FC = () => (\n  <Provider {...stores}>\n    <Router>\n      <Route exact path=\"/\" component={Preview} />\n      <Route path=\"/feed\" component={Main} />\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","import { observable, action } from 'mobx';\nimport connect from '@vkontakte/vkui-connect-promise';\n\ninterface UserI {\n  firstName?: string;\n}\n\nclass Account {\n  public access: string = '';\n\n  @observable\n  public user: UserI = {};\n\n  @observable\n  public ready: boolean = false;\n\n  @action\n  public async init(): Promise<void> {\n    const { data } = await connect.send('VKWebAppGetAuthToken', { app_id: 7045022, scope: '' });\n    this.access = data.access_token;\n    console.log(this);\n  }\n\n  public async api(method: string, params: {}): Promise<[]> {\n    const { data } = await connect.send('VKWebAppCallAPIMethod', {\n      method,\n      params: {\n        ...params,\n        v: '5.77',\n        access_token: this.access,\n      },\n    });\n    return data.response.items;\n  }\n}\n\nexport default Account;\n","import { observable, action } from 'mobx';\nimport groups from '../static/groups.json';\nimport { ImagicI, VKPhotoI } from '../typings';\nimport { account } from '.';\n\nclass Feed {\n  offsets = new Map(groups.map(group => [group.id, 0]));\n\n  @observable\n  data: ImagicI[] = [];\n\n  @observable\n  loading: boolean = false;\n\n  offset = 0;\n  count = 99;\n\n  public setLoading(v: boolean) {\n    this.loading = v;\n  }\n\n  public addPhotos(photos: ImagicI[]) {\n    const shuffle = photos.sort(() => Math.random() - 0.5);\n    this.data = this.data.concat(shuffle);\n  }\n\n  @action\n  public async fetch(): Promise<void> {\n    this.setLoading(true);\n\n    const { id } = groups[Math.floor(Math.random() * groups.length)];\n    const offset = this.offsets.get(id) || 0;\n    const data = await account.api('photos.get', {\n      owner_id: -id,\n      album_id: 'wall',\n      count: this.count,\n      offset: offset,\n      rev: 0,\n    });\n\n    this.offsets.set(id, offset + this.count);\n    this.addPhotos(this.parsePhotos(data));\n    this.setLoading(false);\n  }\n\n  public getPhotoSize(photo: VKPhotoI, size: string) {\n    return (\n      photo.sizes.find(({ type }) => type === size) || {\n        url: null,\n        width: null,\n        height: null,\n      }\n    );\n  }\n\n  public parsePhotos(response: VKPhotoI[]): ImagicI[] {\n    return response.map(photo => {\n      const { url, width, height } = this.getPhotoSize(photo, 'x');\n      const { url: cover } = this.getPhotoSize(photo, 's');\n      return {\n        text: photo.text,\n        photo: url,\n        cover,\n        width,\n        height,\n      };\n    });\n  }\n}\n\nexport default Feed;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nimport { StoresI } from '../stores';\n\nconst ButtonLink = styled(Link)`\n  margin-top: 10px;\n  display: block;\n  border-radius: 5px;\n  color: #fff;\n  text-decoration: none;\n  text-align: center;\n  padding: 20px;\n  font-weight: bold;\n  background: rgba(255, 255, 255, 0.2);\n\n  :hover {\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n  :active {\n    background: rgba(255, 255, 255, 0.4);\n  }\n`;\n\nconst Header = styled.h1`\n  text-align: center;\n  color: #fff;\n`;\n\nconst Layout = styled.div`\n  padding: 0 10vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background: #673ab7;\n`;\n\nconst Preview: React.FC<StoresI> = ({ account }) => {\n  useEffect(() => {\n    account.init();\n  }, []);\n\n  return (\n    <Layout>\n      <Header>✨ imagical ✨</Header>\n      <ButtonLink to=\"/feed\">Go to Feed!</ButtonLink>\n      <ButtonLink to=\"/feed\">Go to Saved!</ButtonLink>\n    </Layout>\n  );\n};\n\nexport default inject('account')(observer(Preview));\n","import React, { useEffect } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Feed } from '../components';\nimport { StoresI } from '../stores';\n\nconst Main: React.FC<StoresI> = ({ feed }) => {\n  useEffect(() => {\n    feed.fetch();\n  }, []);\n\n  return <Feed onFeedEnd={feed.fetch.bind(feed)} loading={feed.loading} feed={feed.data} />;\n};\n\nexport default inject('feed')(observer(Main));\n","import styled from 'styled-components';\n\ninterface Props {\n  x: number;\n}\n\nconst Grid = styled.div<Props>`\n  display: grid;\n  height: 100vh;\n  overflow-y: scroll;\n  grid-template-columns: ${({ x }) => `repeat(${x}, 1fr)`};\n`;\nGrid.defaultProps = {\n  x: 4,\n};\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ImagicI } from '../../typings';\n\nconst Image = styled.img`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: #09091d;\n  object-fit: cover;\n`;\n\nconst Wrap = styled.div`\n  position: relative;\n  padding-bottom: 100%;\n  width: 100%;\n`;\n\ninterface Props {\n  item: ImagicI;\n}\n\nconst Item: React.FC<Props> = ({ item }) => {\n  return (\n    <Wrap>\n      <Image src={item.photo || ''} />\n    </Wrap>\n  );\n};\n\nexport default Item;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect-promise';\n\nimport './static/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root');\nReactDOM.render(<App />, root);\nserviceWorker.unregister();\nconnect.send('VKWebAppInit', {});\n"],"sourceRoot":""}